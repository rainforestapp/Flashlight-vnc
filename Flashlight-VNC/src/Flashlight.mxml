<?xml version="1.0" encoding="utf-8"?>

<!-- Copyright (C) 2009 Marco Fucci

	This program is free software; you can redistribute it and/or modify it under the terms of the
	GNU General Public License as published by the Free Software Foundation;
	either version 2 of the License, or (at your option) any later version.
	
	This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
	without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	See the GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License along with this program;
	if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
	
	Contact : mfucci@gmail.com
-->

<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:cmp="com.flashlight.components.*"
			   xmlns:vnc="com.flashlight.vnc.*"
			   creationComplete="init()" 
	           backgroundColor="#000000">
	
	<s:layout>
		<s:VerticalLayout gap="0" />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.flashlight.components.AskPasswordPopup;
			import com.flashlight.components.MorePopup;
			import com.flashlight.components.SettingsPopup;
			import com.flashlight.utils.ConsoleTarget;
			import com.flashlight.vnc.VNCConst;
			import com.flashlight.vnc.VNCSettings;
			import com.flashright.JsRightClick;
			
			import mx.containers.Box;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.core.Container;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.formatters.SwitchSymbolFormatter;
			import mx.logging.ILogger;
			import mx.logging.Log;
			import mx.logging.LogEventLevel;
			import mx.managers.PopUpManager;
			import mx.utils.URLUtil;
			
			import spark.components.TextArea;
			import spark.core.IViewport;
			import spark.layouts.VerticalLayout;
			
			private static var logger:ILogger = Log.getLogger("Flashlight");
			
			private var mouseOnViewer:Boolean = false;
			
			private var popupAskPassword:AskPasswordPopup = new AskPasswordPopup();
			
			
			[Embed(source="/assets/fitToScreen.png")] [Bindable] private var fitToScreenIcon:Class;
			[Embed(source="/assets/fitToWindow.png")] [Bindable] private var fitToWindowIcon:Class;
			
			[Bindable] private var settings:VNCSettings = new VNCSettings();
			[Bindable] private var hideControls:Boolean;
			[Bindable] private var password:String;
			[Bindable] private var fullscreenMode:Boolean = false;
			
			[Bindable] private var updateRectangle:Rectangle;
			[Bindable] private var framebufferHasOffset:Boolean = false;
			
			private function init():void {
				var osArray:Array = Capabilities.version.split(' ');
				var versionArray:Array = osArray[1].split(',');
				var majorVersion:Number = parseInt(versionArray[0]);
				
				if (majorVersion < 10) {
					Alert.show("ERROR:\nFlashlight-VNC requires Flash 10 or later.\nPlease upgrade.");
					return;
				}
				
				var debug:Boolean = parameters.debug == "true";
				hideControls = parameters.hideControls == "true";
				var autoConnect:Boolean = parameters.autoConnect == "true";
				
				if (!hideControls) settings.bindToSharedObject();
				
				if (parameters.scale) settings.scale = parameters.scale == "true";
				if (parameters.shared) settings.shared = parameters.shared == "true";
				if (parameters.viewOnly) settings.viewOnly = parameters.viewOnly == "true";
				if (parameters.host) settings.host = parameters.host;
				if (parameters.port) settings.port = int(parameters.port);
				if (parameters.password) password = parameters.password;
				if (parameters.securityPort) {
					settings.securityPort = int(parameters.securityPort);
					settings.useSecurity = true;
				}
				if (parameters.updateRegion) {
					var updateRegionParam:String = parameters.updateRegion;
					var parts:Array = updateRegionParam.split("x");
					if (parts.length >= 4) {
						updateRectangle = new Rectangle(parts[0],parts[1],parts[2],parts[3]);
					}
					if (parts.length >=5 && parts[4] == 'o') framebufferHasOffset = true;
				}
				if (parameters.encoding) {
					switch (String(parameters.encoding).toLowerCase()) {
						case "tight":
							settings.encoding = VNCConst.ENCODING_TIGHT;
							break;
						case "hextile":
							settings.encoding = VNCConst.ENCODING_HEXTILE;
							break;
						case "rre":
							settings.encoding = VNCConst.ENCODING_RRE;
							break;
						case "raw":
							settings.encoding = VNCConst.ENCODING_RAW;
							break;
					}
				}
				if (parameters.colorDepth) settings.colorDepth = int(parameters.colorDepth);
				if (parameters.jpegCompression) settings.jpegCompression = parameters.jpegCompression == "off" ? -1 : parameters.jpegCompression;
				if (parameters.useRemoteCursor) settings.useRemoteCursor = parameters.useRemoteCursor == "true";
				
				if (debug) {
					var console:TextArea = new TextArea();
					console.editable = false;
					console.percentWidth = 100;
					
					this.addElement(console);
					
					var consoleTarget:ConsoleTarget = new ConsoleTarget(console)
					consoleTarget.level = LogEventLevel.DEBUG;
				}
				
				logger.debug(">> init()");
				
				try {
					new JsRightClick();
				} catch (e:Error) {
					logger.error("Error whith right-click emulation: "+e.toString());
				}
				
				if (autoConnect) {
					// wait for databinding
					var timer:Timer = new Timer(100,1);
					timer.addEventListener(TimerEvent.TIMER_COMPLETE,onConnectTimer);
					timer.start();
				}
				
				logger.debug("<< init()");
			}
			
			private function onConnectTimer(event:TimerEvent):void {
				vnc.connect();
			}
			
			private function onFrameEnter(event:Event):void {
				var newValue:Number;
				var element:UIComponent = UIComponent(event.target);
				var scrollMoved:Boolean = false;
				
				// prevent an error when parent is not yet created
				if (!element.parent) return;
				
				var container:IViewport = viewer.parent as IViewport;
				
				if (viewerScroller.verticalScrollBar != null) {
					var viewHeight:Number = container.height;
	        		var marginYTop:Number = viewHeight*container.verticalScrollPosition/(4*element.height) + viewHeight/8;
	        		var verticalScrollPositionSym:Number = element.height-viewHeight-container.verticalScrollPosition;
	        		var marginYBottom:Number = viewHeight*verticalScrollPositionSym/(4*element.height) + viewHeight/8;
	        		var mouseY:Number = element.mouseY*element.scaleY;
	        		var mouseYSym:Number = element.height - mouseY;
        			
	        		if (mouseY<container.verticalScrollPosition+marginYTop && container.verticalScrollPosition > 0) {
        				newValue = (mouseY-viewHeight/8)/(1+viewHeight/(4*element.height))-1;
        				newValue = Math.max(newValue,0);
        				container.verticalScrollPosition = newValue;
        				scrollMoved = true;
        			}
	        		
	        		if (mouseYSym<verticalScrollPositionSym+marginYBottom && verticalScrollPositionSym > 0) {
        				newValue = (mouseYSym-viewHeight/8)/(1+viewHeight/(4*element.height))-2;
        				newValue = element.height-viewHeight-newValue;
        				newValue = Math.min(newValue,container.contentHeight-container.height);
        				container.verticalScrollPosition = newValue;
        				scrollMoved = true;
        			}
				}
				
				if (viewerScroller.horizontalScrollBar!=null) {
	        		var viewWidth:Number = container.width;
	        		var marginXLeft:Number = viewWidth*container.horizontalScrollPosition/(4*element.width) + viewWidth/8;
	        		var horizontalScrollPositionSym:Number = element.width-viewWidth-container.horizontalScrollPosition;
	        		var marginXRight:Number = viewWidth*horizontalScrollPositionSym/(4*element.width) + viewWidth/8;
	        		var mouseX:Number = element.mouseX*element.scaleX;
	        		var mouseXSym:Number = element.width - mouseX;
	        		
	        		if (mouseX<container.horizontalScrollPosition+marginXLeft && container.horizontalScrollPosition > 0) {
        				newValue = (mouseX-viewWidth/8)/(1+viewWidth/(4*element.width))-2;
        				newValue =  Math.max(newValue,0);
        				container.horizontalScrollPosition = newValue;
        				scrollMoved = true;
        			}
	        		
	        		if (mouseXSym<horizontalScrollPositionSym+marginXRight && horizontalScrollPositionSym > 0) {
        				newValue = (mouseXSym-viewWidth/8)/(1+viewWidth/(4*element.width))-2;
        				newValue = element.width-viewWidth-newValue;
        				newValue = Math.min(newValue,container.contentWidth-container.width);
        				container.horizontalScrollPosition = newValue;
        				scrollMoved = true;
        			}
	        	}
	        	
	        	if (scrollMoved && vnc.screen) {
					var evenMove:MouseEvent = new MouseEvent(MouseEvent.MOUSE_MOVE);
					evenMove.localX = vnc.screen.mouseX;
					evenMove.localY = vnc.screen.mouseY;
					vnc.screen.dispatchEvent(evenMove);
	        	}
			}
			
			private function onRemoteCursorMove(position:Point):void {
				var container:IViewport = viewer.parent as IViewport;
				
	        	if (!mouseOnViewer || vnc.viewOnly) {
		        	var newValue:int;
	        		if (viewerScroller.horizontalScrollBar!=null) {
		        		var viewWidth:int = container.width;
		        		var marginX:int = viewWidth/4;
		        		
		        		if (position.x<container.horizontalScrollPosition+marginX 
		        			&& container.horizontalScrollPosition > 0) {
	        				newValue = position.x-marginX;
	        				container.horizontalScrollPosition = Math.max(newValue,0);
	        			}
		        		
		        		if (position.x>container.horizontalScrollPosition+viewWidth-marginX) {
	        				newValue = position.x+marginX-viewWidth;
	        				container.horizontalScrollPosition = Math.min(newValue,container.contentWidth-container.width);
	        			}
		        	}
	        			
	        		if (viewerScroller.verticalScrollBar!=null) {
		        		var viewHeight:int = container.height;
		        		var marginY:int = viewHeight/4;
	        			
		        		if (position.y<container.verticalScrollPosition+marginY 
		        			&& container.verticalScrollPosition > 0) {
	        				newValue = position.y-marginY;
	        				container.verticalScrollPosition = Math.max(newValue,0);
	        			}
		        		
		        		if (position.y>container.verticalScrollPosition+viewHeight-marginY ) {
	        				newValue = position.y+marginY-viewHeight;
	        				container.verticalScrollPosition = Math.min(newValue,container.contentHeight-container.height);
	        			}
		        	}
	        	}
			}
			
			private function onViewerRollOver(event:Event):void {
				event.target.addEventListener(Event.ENTER_FRAME, onFrameEnter);
				mouseOnViewer = true;
			}
			
			private function onViewerRollOut(event:Event):void {
				event.target.removeEventListener(Event.ENTER_FRAME, onFrameEnter);
				mouseOnViewer = false;
			}
			
			private function switchFullscreen():void {
				if (FlexGlobals.topLevelApplication.stage.displayState == StageDisplayState.NORMAL)	{
					FlexGlobals.topLevelApplication.stage.displayState = StageDisplayState.FULL_SCREEN;
				} else {
					FlexGlobals.topLevelApplication.stage.displayState = StageDisplayState.NORMAL;
				}
			}
			
			private function switchFullScreen():void {
				if (fullscreenMode) {
					fullscreenMode = false;
					FlexGlobals.topLevelApplication.stage.removeEventListener(FullScreenEvent.FULL_SCREEN,exitFullScreen);
					FlexGlobals.topLevelApplication.stage.displayState = StageDisplayState.NORMAL;
				} else {
					try {
						FlexGlobals.topLevelApplication.stage.displayState = StageDisplayState.FULL_SCREEN;
						FlexGlobals.topLevelApplication.stage.addEventListener(FullScreenEvent.FULL_SCREEN,exitFullScreen);
						fullscreenMode = true;
					} catch (e:SecurityError) {
						Alert.show('Fullscreen mode not allowed on flash movie.');
					}
				}
			}
			
			private function exitFullScreen(event:FullScreenEvent):void {
				fullscreenMode = false;
			}
			
			private var UserClickedToConnect:Boolean;
			private function ConnectClick():void{
				if (vnc.status == "Connected"){
					UserClickedToConnect = false;
				}
			}
			private function checkStatus(strStatus:String):String{
				if (strStatus == "Not connected" && UserClickedToConnect == true){
					vnc.connect();
				}else if (strStatus.toLowerCase() == "connected"){
					UserClickedToConnect = true;
				}
				return strStatus;
			} 
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<vnc:VNCClient id="vnc"
		   vncError="Alert.show(event.message)" 
		   vncPasswordRequiered="popupAskPassword.show(vnc,this);"
		   vncRemoteCursor="onRemoteCursorMove(event.position)"
		   host="{settings.host}"
		   port="{settings.port}"
		   securityPort="{settings.securityPort}"
		   password="{password}"
		   viewOnly="{settings.viewOnly}"
		   shareConnection="{settings.shared}"
		   encoding="{settings.encoding}"
		   colorDepth="{settings.colorDepth}"
		   jpegCompression="{settings.jpegCompression}"
		   updateRectangleSettings="{updateRectangle}"
		   framebufferHasOffset="{framebufferHasOffset}"
		   useRemoteCursor="{settings.useRemoteCursor}"
		   />
		
	</fx:Declarations>
	
	<s:SkinnableContainer width="100%" height="100%" backgroundColor="#000000">
		<s:Scroller id="viewerScroller" width="100%" height="100%">
			<s:Group>
				<s:layout>
					<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle" />
				</s:layout>
				<mx:Image id="viewer" source="{vnc.screen}"
						  percentHeight="{settings.scale ? 100 : undefined}"
						  percentWidth="{settings.scale ? 100 : undefined}"
						  horizontalAlign="center" verticalAlign="middle"
						  rollOver="onViewerRollOver(event)"
						  rollOut="onViewerRollOut(event)"/>
			</s:Group>
		</s:Scroller>
	</s:SkinnableContainer>
	
	<s:SkinnableContainer id="controls" width="100%" backgroundColor="#CCCCCC"
						  visible="{!hideControls}" height="{hideControls ? 0 : undefined}">
		<s:layout>
			<s:HorizontalLayout paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" verticalAlign="middle"/>
		</s:layout>
		
		<s:Label text="{(vnc.status ? checkStatus(vnc.status) : checkStatus(vnc.status)) + (vnc.serverName ? ' '+vnc.serverName : '')}" width="100%" />
		<cmp:ConnectButton height="26" vncClient="{vnc}" click="ConnectClick();"/>
		<mx:Button width="26" height="26" toolTip="Settings" click="(new SettingsPopup()).show(settings,this);" icon="@Embed('/assets/settings.png')"/>
		<mx:Button width="26" height="26" toolTip="More options" click="(new MorePopup()).show(vnc,this);" label="…" />
		<mx:Button width="26" height="26" toolTip="Switch Fullscreen" icon="{fullscreenMode ? fitToWindowIcon : fitToScreenIcon}"	click="switchFullScreen()"/>
	</s:SkinnableContainer>

</s:Application>
